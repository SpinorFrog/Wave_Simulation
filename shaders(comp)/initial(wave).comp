#version 460 core
#define PI 3.14159

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(rgba32f, binding = 1) uniform image2D old;

uniform mat4 viewmat;
uniform float time;
uniform int classical;

vec2 res = vec2(1024);
mat2 i;
mat2 r = mat2(1.0f);

vec4 recursion(vec2 num);
float dt = 0.001;

void main()
{
    //float angle = sin(time);
    i[0] = vec2(0, 1);
    i[1] = vec2(-1, 0);

    ivec2 texCoords = ivec2(gl_GlobalInvocationID.xy);
    //vec2 pos = vec2(mat3(transpose(viewmat))*vec3(texCoords, 1));
    vec2 pos = 64*vec2(texCoords-res/2)/res;
    float d = 0.4;

    vec2 ogPos;
    ogPos = vec2(0, 0);

    float height1 = 2*exp(-(pow(pos.x-ogPos.x,2)+pow(pos.y-ogPos.y,2))/(2*d*d))/(sqrt(2*PI*d*d));

    float height = exp(-(pow(pos.x-ogPos.x,2)+pow(pos.y-ogPos.y,2))/(4*d*d))/(sqrt(2*PI*d*d));

    vec2 p = vec2(6, 0);

    if(length(pos - ogPos) > 7){
        height = 0;
    }

    //ogPos = vec2(-4, 0);

    //d = 0.5;

    //float height2 = -2*exp(-(pow(pos.x-ogPos.x,2)+pow(pos.y-ogPos.y,2))/(2*d*d))/(sqrt(2*PI*d*d));    

    //vec2 p = vec2(0, 0);

    //vec4 color = vec4(sin(pos.x*PI/4)*sin(pos.y*PI/4), 0, 0, 1);

    vec4 color = vec4(height1, 0, 0, 1);
    if(!bool(classical))
        color = height*vec4(cos(dot(p,pos)), sin(dot(p,pos)), 0, 1);
    
    imageStore(old, texCoords, color);
    //vec4 color = vec4(sin(pos.x*PI/4)*cos(pos.y*PI/4), 0, 0, 1);
    //vec4 color = height*vec4(cos(dot(p,pos)), sin(dot(p,pos)), 0, 1);
    //vec4 color = vec4(pos.x*pos.x - pos.y*pos.y, 0, 0, 1);
    //if(length(pos) < 2)
        //color = recursion(pos);
    color += 0*dt*height1*vec4(4, 0, 0, 0);
    imageStore(imgOutput, texCoords, color);
}//